import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial.distance import cdist


# Hiển thị các điểm giá trị lên đồ thị
def kmeans_display(X, label):
    K = np.amax(label) + 1
    X0 = X[label == 0, :]
    X1 = X[label == 1, :]
    X2 = X[label == 2, :]

    plt.plot(X0[:, 0], X0[:, 1], 'b^', markersize=4, alpha=.8)
    plt.plot(X1[:, 0], X1[:, 1], 'go', markersize=4, alpha=.8)
    plt.plot(X2[:, 0], X2[:, 1], 'rs', markersize=4, alpha=.8)

    plt.axis('equal')
    plt.plot()
    plt.show()


# --------------------------------------------------
# Khởi tạo các centroid ban đầu
def kmeans_init_centroids(X, k):
    # chọn ngẩu nhiên K mẫu từ tập X để tạo tâm ban đầu
    return X[np.random.choice(X.shape[0], k, replace=False)]

# ---------------------------------------------------
# Tìm các label mới khi có centroid
def kmeans_assign_labels (X, centroids):
    #tính toán khoảng cách điểm dữ liệu và centroid
    D = cdist(X, centroids)
    #trả về địa chỉ centroid gần nhất (0 theo từng cột, 1 theo từng hàng)
    return np.argmin(D, axis=1)

#-------------------------------------------------------
#kiểm tra điều kiện dừng
#trả về True nếu 2 set giống nhau
def has_converged(centroids, new_centroids):
    return (set([tuple(a) for a in centroids]) == set([tuple(a) for a in new_centroids]))

#--------------------------------------------------------
#cập nhật centroid mới khi biết label của dữ liệu
def kmeans_update_centroids(X, labels, K):
    centroids = np.zeros((K, X.shape[1])) # tạo ma trận 0 với K hàng X.shape[1] cột
    for k in range (K):
#nhóm lại các điểm có cũng cụm
        Xk = X[labels == k, :]
        centroids[k,:] = np.mean(Xk, axis = 0) # tính trung bình
    return centroids

#---------------------------------------------------------
#hàm chính của K_mean
def kmeans(X, K):
    centroids = [kmeans_init_centroids(X, K)]
    labels = []
    it = 0
    while True:
        labels.append(kmeans_assign_labels(X, centroids[-1]))
        new_centroids = kmeans_update_centroids(X, labels[-1], K)
        if has_converged(centroids[-1], new_centroids):
            break
        centroids.append(new_centroids)
        it += 1
    return (centroids, labels, it)
